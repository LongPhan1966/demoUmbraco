@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Umbraco.Web.Controllers



@{

    var registerModel = Members.CreateRegistrationModel();
    var login = (LoginRegister)Umbraco.Content(1171);

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js");
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js");
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js");

    var success = TempData["FormSuccess"] != null;
}

@Html.RenderJsHere()
<div class="container mb-50 mt-50">
    <legend class="mt-50 mb-20">Register Member</legend>
    <div class="row">
        <div class="col-md-8">
            <img width="100%" src="~/img/register.png" />
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-center">
                <img src="~/img/logofooter.png" />
            </div>


            @if (success)
            {
                <div class="d-flex justify-content-center mt-20">
                    <p>Registration succeeded.</p>
                </div>
            }
            else
            {
                using (Html.BeginUmbracoForm<UmbRegisterController>("HandleRegisterMember"))
                {
                    <fieldset>

                        @Html.ValidationSummary("registerModel", true)

                        <div class="register-name mt-20">
                            @Html.LabelFor(m => registerModel.Name, null, new { @class = "lable-username" })
                            @Html.TextBoxFor(m => registerModel.Name, null, new { @class = "input-username" })
                        </div>
                        @Html.ValidationMessageFor(m => registerModel.Name)

                        <br />

                        <div class="register-email">
                            @Html.LabelFor(m => registerModel.Email, null, new { @class = "lable-email" })
                            @Html.TextBoxFor(m => registerModel.Email, null, new { @class = "input-email" })
                        </div>
                        @Html.ValidationMessageFor(m => registerModel.Email)

                        <br />

                        <div class="register-password">
                            @Html.LabelFor(m => registerModel.Password, null, new { @class = "lable-password" })
                            @Html.PasswordFor(m => registerModel.Password, new { @class = "input-password" })
                        </div>
                        @Html.ValidationMessageFor(m => registerModel.Password)
                        <br />

                        @if (registerModel.MemberProperties != null)
                        {
                            for (var i = 0; i < registerModel.MemberProperties.Count; i++)
                            {
                                @Html.LabelFor(m => registerModel.MemberProperties[i].Value, registerModel.MemberProperties[i].Name)
                                @Html.EditorFor(m => registerModel.MemberProperties[i].Value)
                                @Html.HiddenFor(m => registerModel.MemberProperties[i].Alias)
                                <br />
                            }
                        }

                        @Html.HiddenFor(m => registerModel.MemberTypeAlias)
                        @Html.HiddenFor(m => registerModel.RedirectUrl)
                        @Html.HiddenFor(m => registerModel.UsernameIsEmail)

                        <button class="btn btn-primary d-flex justify-content-center">Register</button>

                    </fieldset>
                }
            }
        </div>
    </div>
</div>
